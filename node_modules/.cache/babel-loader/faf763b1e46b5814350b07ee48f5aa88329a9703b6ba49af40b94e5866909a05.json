{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $3b117e43dc0ca95d$exports = {};\n$parcel$export($3b117e43dc0ca95d$exports, \"Pressable\", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);\nvar $f6c31cce2adf654f$exports = {};\n$parcel$export($f6c31cce2adf654f$exports, \"usePress\", () => $f6c31cce2adf654f$export$45712eceda6fad21);\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring';\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n      if (target.getAttribute('style') === '') target.removeAttribute('style');\n      $14c0b72509d70225$var$modifiedElementMap.delete(target);\n    }\n}\nfunction $8a9cb279dc87e130$export$60278871457622de(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n  isPropagationStopped() {\n    return false;\n  }\n  persist() {}\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur;\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  $bx7SL$useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  // This function is called during a React onFocus event.\n  return $bx7SL$useCallback(e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e1.target;\n      let onBlurHandler = e => {\n        var\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          _current, ref;\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n          e.stopPropagation();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {\n  const {\n    key: key,\n    code: code,\n    target: target\n  } = event;\n  const element = target;\n  const {\n    tagName: tagName,\n    isContentEditable: isContentEditable\n  } = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') &&\n  // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\nfunction $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child,\n  // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nvar $f1ab8c75478c6f73$exports = {};\n$parcel$export($f1ab8c75478c6f73$exports, \"PressResponder\", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\nvar $a1ea59d68270f0dd$exports = {};\n$parcel$export($a1ea59d68270f0dd$exports, \"useFocus\", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\nvar $507fabe10e71c6fb$exports = {};\n$parcel$export($507fabe10e71c6fb$exports, \"isFocusVisible\", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);\n$parcel$export($507fabe10e71c6fb$exports, \"getInteractionModality\", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);\n$parcel$export($507fabe10e71c6fb$exports, \"setInteractionModality\", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);\n$parcel$export($507fabe10e71c6fb$exports, \"useInteractionModality\", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisible\", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisibleListener\", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($8a9cb279dc87e130$export$60278871457622de(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return;\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\nvar $9ab94262bd0047c7$exports = {};\n$parcel$export($9ab94262bd0047c7$exports, \"useFocusWithin\", () => $9ab94262bd0047c7$export$420e68273165f4ec);\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  });\n  let onBlur = $bx7SL$useCallback(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = $bx7SL$useCallback(e => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\nvar $6179b936705e76d3$exports = {};\n$parcel$export($6179b936705e76d3$exports, \"useHover\", () => $6179b936705e76d3$export$ae780daf29e6d456);\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps = {};\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\nvar $e0b6e0b68ec7f50f$exports = {};\n$parcel$export($e0b6e0b68ec7f50f$exports, \"useInteractOutside\", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    };\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n  return ref.current && !ref.current.contains(event.target);\n}\nvar $46d819fcbaf35654$exports = {};\n$parcel$export($46d819fcbaf35654$exports, \"useKeyboard\", () => $46d819fcbaf35654$export$8f71654801c2f7cd);\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\nvar $e8a7022cf87cba2a$exports = {};\n$parcel$export($e8a7022cf87cba2a$exports, \"useMove\", () => $e8a7022cf87cba2a$export$36da96379f79f245);\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\nvar $7d0a636d7a4dcefd$exports = {};\n$parcel$export($7d0a636d7a4dcefd$exports, \"useScrollWheel\", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return;\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\nvar $8a26561d2877236e$exports = {};\n$parcel$export($8a26561d2877236e$exports, \"useLongPress\", () => $8a26561d2877236e$export$c24ed0104d07eab9);\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({\n          ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({\n            ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold);\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({\n        ...e,\n        type: 'longpressend'\n      });\n    }\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$8a9cb279dc87e130$export$60278871457622de","event","mozInputSource","isTrusted","detail","pointerType","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","nativeEvent","defaultPrevented","preventDefault","stopPropagation","isPropagationStopped","persist","type","currentTarget","relatedTarget","bubbles","cancelable","eventPhase","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","$bx7SL$useRef","isFocused","observer","current","$bx7SL$useLayoutEffect","state","disconnect","$bx7SL$useCallback","e1","HTMLButtonElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","onBlurHandler","e","_current","ref","disabled","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPress1","onPressChange","onPressChange1","onPressStart","onPressStart1","onPressEnd","onPressEnd1","onPressUp","onPressUp1","isDisabled","isDisabled1","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","triggerPressStart","originalEvent","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","arguments","length","undefined","triggerPressUp","cancel","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","repeat","onKeyUp","onClick","button","$bx7SL$focusWithoutScrolling","$f6c31cce2adf654f$var$isHTMLAnchorLink","click","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","key","code","element","isContentEditable","role","targetTouches","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","pressure","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","_ref","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","_ref2","isRegistered","prevContext","console","warn","createElement","Provider","value","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","Set","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","HTMLElement","prototype","apply","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","hoverProps1","triggerHoverEnd","triggerHoverEnd1","triggerHoverStart","onPointerEnter","onPointerLeave","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps1","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","_ref3","_ref4","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/index.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/Pressable.tsx","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/PressResponder.tsx","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocus.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusWithin.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useInteractOutside.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useKeyboard.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/createEventHandler.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useMove.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useScrollWheel.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './Pressable';\nexport * from './PressResponder';\nexport * from './useFocus';\nexport * from './useFocusVisible';\nexport * from './useFocusWithin';\nexport * from './useHover';\nexport * from './useInteractOutside';\nexport * from './useKeyboard';\nexport * from './useMove';\nexport * from './usePress';\nexport * from './useScrollWheel';\nexport * from './useLongPress';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {HTMLAttributes, ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<HTMLAttributes<HTMLElement>, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<HTMLElement>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {isVirtualClick} from './utils';\nimport {PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<HTMLElement>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: HTMLElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: HTMLAttributes<HTMLElement>\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: HTMLAttributes<HTMLElement> = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target as HTMLElement)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget as HTMLElement;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as HTMLElement;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target.contains(target) && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as HTMLElement) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as HTMLElement).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, code, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: HTMLElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: HTMLElement) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: HTMLElement) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && (target as HTMLButtonElement | HTMLInputElement).type === 'submit');\n}\n\nfunction isVirtualPointerEvent(event: PointerEvent) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return (\n    (event.width === 0 && event.height === 0) ||\n    (event.width === 1 &&\n      event.height === 1 &&\n      event.pressure === 0 &&\n      event.detail === 0 &&\n      event.pointerType === 'mouse'\n    )\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<HTMLElement, string>();\n\nexport function disableTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<HTMLElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<HTMLElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback} from 'react';\nimport {FocusEvents} from '@react-types/shared';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\ntype FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\ninterface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {HoverEvents} from '@react-types/shared';\nimport {HTMLAttributes, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: HTMLAttributes<HTMLElement>,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: HTMLAttributes<HTMLElement> = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\ninterface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {HTMLAttributes} from 'react';\nimport {KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {MoveEvents, PointerType} from '@react-types/shared';\nimport React, {HTMLAttributes, useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, useRef} from 'react';\nimport {LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\n\ninterface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\ninterface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: HTMLAttributes<HTMLElement>\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}