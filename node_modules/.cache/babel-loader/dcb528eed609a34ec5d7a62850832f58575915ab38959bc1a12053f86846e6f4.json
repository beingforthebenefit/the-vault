{"ast":null,"code":"import { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport $1BfjW$react, { useMemo as $1BfjW$useMemo } from \"react\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nvar $4a0dd036d492cee4$exports = {};\n$parcel$export($4a0dd036d492cee4$exports, \"useTableState\", () => $4a0dd036d492cee4$export$907bcc6c48325fd6);\nconst $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n// const RESIZE_BUFFER_COLUMN_KEY = 'resize-buffer-column' + Math.random().toString(36).slice(2);\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n    while (parentKey) {\n      let parent = keyMap.get(parentKey);\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n        let {\n          column: column,\n          index: index\n        } = seen.get(parent);\n        if (index > col.length) break;\n        for (let i = index; i < col.length; i++) column.splice(i, 0, null);\n        // Adjust shifted indices\n        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n      parentKey = parent.parentKey;\n    }\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column1 of columns) {\n    let i = maxLength - 1;\n    for (let item of column1) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n          row.push(placeholder);\n        }\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n      i--;\n    }\n    colIndex++;\n  }\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row1 of headerRows) {\n    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(placeholder);\n    }\n    i++;\n  }\n  return headerRows.map((childNodes, index) => {\n    let row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\nvar tmp = Symbol.iterator;\nclass $788781baa30117fa$export$596e1b2e2cf93690 extends $1BfjW$GridCollection {\n  *[tmp]() {\n    yield* this.body.childNodes;\n  }\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    var ref;\n    return (ref = [...this.body.childNodes][0]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n  getLastKey() {\n    var ref;\n    let rows = [...this.body.childNodes];\n    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes, prev, opts) {\n    let rowHeaderColumnKeys = new Set();\n    let body;\n    let columns = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      let rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n      for (let child of node.childNodes) visit(child);\n    };\n    for (let node1 of nodes) visit(node1);\n    // if (Array.from(nodes).some(node => node.props?.allowsResizing)) {\n    //   /*\n    //   If the table content width > table width, a horizontal scroll bar is present.\n    //   If a user tries to resize a column, making it smaller while they are scrolled to the\n    //   end of the content horizontally, it shrinks the total table content width, causing\n    //   things to snap around and breaks the resize behavior.\n    //   To fix this, we add a resize buffer column (aka \"spooky column\") to the end of the table.\n    //   The width of this column defaults to 0. If you try and shrink a column and the width of the\n    //   table contents > table width, then the \"spooky column\" will grow to take up the difference\n    //   so that the total table content width remains constant while you are resizing. Once you\n    //   finish resizing, the \"spooky column\" snaps back to 0.\n    //   */\n    //   let resizeBufferColumn: GridNode<T> = {\n    //     type: 'column',\n    //     key: RESIZE_BUFFER_COLUMN_KEY,\n    //     value: null,\n    //     textValue: '',\n    //     level: 0,\n    //     index: columns.length,\n    //     hasChildNodes: false,\n    //     rendered: null,\n    //     childNodes: [],\n    //     props: {\n    //       isResizeBuffer: true,\n    //       defaultWidth: 0\n    //     }\n    //   };\n    //   columns.push(resizeBufferColumn);\n    // }\n    let headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n  }\n}\nconst $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  let {\n    selectionMode = 'none'\n  } = props;\n  let context = $1BfjW$useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode: selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n  let collection = $1BfjW$useCollection(props, (nodes, prev) => new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context), context);\n  let {\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $1BfjW$useGridState({\n    ...props,\n    collection: collection\n  });\n  // const tableColumnResizeState = useTableColumnResizeState({columns: collection.columns, getDefaultWidth: props.getDefaultWidth, onColumnResize: props.onColumnResize, onColumnResizeEnd: props.onColumnResizeEnd});\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n  };\n}\nvar $312ae3b56a94a86e$exports = {};\n$parcel$export($312ae3b56a94a86e$exports, \"TableHeader\", () => $312ae3b56a94a86e$export$f850895b287ef28e);\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    columns: columns\n  } = props;\n  if (typeof children === 'function') {\n    if (!columns) throw new Error('props.children was a function but props.columns is missing');\n    for (let column of columns) yield {\n      type: 'column',\n      value: column,\n      renderer: children\n    };\n  } else {\n    let columns = [];\n    $1BfjW$react.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n    yield* columns;\n  }\n};\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\nvar $4ae5314bf50db1a3$exports = {};\n$parcel$export($4ae5314bf50db1a3$exports, \"TableBody\", () => $4ae5314bf50db1a3$export$76ccd210b9029917);\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    items: items1\n  } = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props: props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $1BfjW$react.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n        yield* items;\n      }\n    }\n  };\n};\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\nvar $1cd244557c2f97d5$exports = {};\n$parcel$export($1cd244557c2f97d5$exports, \"Column\", () => $1cd244557c2f97d5$export$816b5d811295e6bc);\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {\n  let {\n    title: title,\n    children: children,\n    childColumns: childColumns1\n  } = props;\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n    *childNodes() {\n      if (childColumns1) for (let child1 of childColumns1) yield {\n        type: 'column',\n        value: child1\n      };else if (title) {\n        let childColumns = [];\n        $1BfjW$react.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child\n          });\n        });\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n  let updateContext = context => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n  updateContext(context1);\n};\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\nvar $70d70eb16ea48428$exports = {};\n$parcel$export($70d70eb16ea48428$exports, \"Row\", () => $70d70eb16ea48428$export$b59bdbef9ce70de2);\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') for (let column of context.columns) yield {\n        type: 'cell',\n        element: children(column.key),\n        key: column.key // this is combined with the row key by CollectionBuilder\n      };else {\n        let cells = [];\n        $1BfjW$react.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nvar $941d1d9a6a28982a$exports = {};\n$parcel$export($941d1d9a6a28982a$exports, \"Cell\", () => $941d1d9a6a28982a$export$f6f0c3fe4ec306ea);\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children\n  } = props;\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $6555104ff085bef4$re_export$Section as Section, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell };","map":{"version":3,"names":["$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","Math","random","toString","slice","$788781baa30117fa$var$buildHeaderRows","keyMap","columnNodes","columns","seen","Map","column","parentKey","col","parent","get","has","colspan","index","length","i","splice","i1","push","set","maxLength","max","map","c","headerRows","Array","fill","colIndex","column1","item","row","rowLength","reduce","p","placeholder","type","key","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","Symbol","iterator","$788781baa30117fa$export$596e1b2e2cf93690","$1BfjW$GridCollection","body","size","getKeys","keys","getKeyBefore","node","getKeyAfter","getFirstKey","ref","getLastKey","rows","getItem","at","idx","nodes","prev","opts","rowHeaderColumnKeys","Set","showSelectionCheckboxes","rowHeaderColumn","props","isSelectionCell","unshift","columnKeyMap","visit","isRowHeader","add","child","node1","forEach","columnCount","items","visitNode","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","selectionMode","context","$1BfjW$useMemo","children","collection","$1BfjW$useCollection","disabledKeys","selectionManager","$1BfjW$useGridState","sortDescriptor","sort","columnKey","direction","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","Error","renderer","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","items1","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","context1","title","childColumns","childColumns1","fullNodes","count","child1","shouldInvalidate","newContext","updateContext","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","cells","cell","concat","some","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea"],"sources":["/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/index.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableState.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableCollection.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableHeader.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableBody.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Column.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Row.ts","/home/runner/work/the-vault/the-vault/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Cell.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// export * from './useTableColumnResizeState';\n// export * from './utils';\nexport * from './useTableState';\nexport * from './TableHeader';\nexport * from './TableBody';\nexport * from './Column';\nexport * from './Row';\nexport * from './Cell';\nexport {Section} from '@react-stately/collections';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AffectedColumnWidths} from './useTableColumnResizeState';\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\n// import {GridNode} from '@react-types/grid';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void\n  // /** A map of all the column widths by key. */\n  // columnWidths: MutableRefObject<Map<Key, number>>,\n  // /** Boolean for if a column is being resized. */\n  // isResizingColumn: boolean,\n  // /** Getter for column width. */\n  // getColumnWidth(key: Key): number,\n  //   /** Getter for column min width. */\n  // getColumnMinWidth(key: Key): number,\n  //   /** Getter for column max widths. */\n  // getColumnMaxWidth(key: Key): number,\n  // /** Trigger a resize and recalc. */\n  // onColumnResize: (column: GridNode<T>, width: number) => void,\n  // /** Runs at the start of resizing. */\n  // onColumnResizeStart: () => void,\n  // /** Triggers the onColumnResizeEnd prop. */\n  // onColumnResizeEnd: () => void,\n  // /** Need to be able to set the table width so that it can be used to calculate the column widths, this will trigger a recalc. */\n  // setTableWidth: (width: number) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean,\n  /** Function for determining the default width of columns. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  // const tableColumnResizeState = useTableColumnResizeState({columns: collection.columns, getDefaultWidth: props.getDefaultWidth, onColumnResize: props.onColumnResize, onColumnResizeEnd: props.onColumnResizeEnd});\n\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n    // ...tableColumnResizeState\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n// const RESIZE_BUFFER_COLUMN_KEY = 'resize-buffer-column' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    // if (Array.from(nodes).some(node => node.props?.allowsResizing)) {\n    //   /*\n    //   If the table content width > table width, a horizontal scroll bar is present.\n    //   If a user tries to resize a column, making it smaller while they are scrolled to the\n    //   end of the content horizontally, it shrinks the total table content width, causing\n    //   things to snap around and breaks the resize behavior.\n\n    //   To fix this, we add a resize buffer column (aka \"spooky column\") to the end of the table.\n    //   The width of this column defaults to 0. If you try and shrink a column and the width of the\n    //   table contents > table width, then the \"spooky column\" will grow to take up the difference\n    //   so that the total table content width remains constant while you are resizing. Once you\n    //   finish resizing, the \"spooky column\" snaps back to 0.\n    //   */\n    //   let resizeBufferColumn: GridNode<T> = {\n    //     type: 'column',\n    //     key: RESIZE_BUFFER_COLUMN_KEY,\n    //     value: null,\n    //     textValue: '',\n    //     level: 0,\n    //     index: columns.length,\n    //     hasChildNodes: false,\n    //     rendered: null,\n    //     childNodes: [],\n    //     props: {\n    //       isResizeBuffer: true,\n    //       defaultWidth: 0\n    //     }\n    //   };\n    //   columns.push(resizeBufferColumn);\n    // }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}